// app/api/apply/route.ts
export const runtime = "nodejs";
export const dynamic = "force-dynamic";

import { NextResponse } from "next/server";
import { db } from "@/lib/prisma";
import bcrypt from "bcryptjs";
import crypto from "crypto";
import { sendAccessEmail } from "@/lib/mailer";

const ROLES = new Set(["developer", "designer", "audio", "pm"]);
const emailRe = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
const phoneRe = /^\+?\d{10,14}$/;

type Member = {
  name: string;
  email: string;
  phone: string;
  age: number;
  role: string;
};

const MIN_TEAM = 3;
const MAX_TEAM = 5;
const sha256 = (s: string) => crypto.createHash("sha256").update(s).digest("hex");

function uid() {
  return Math.random().toString(36).slice(2, 10);
}
function inviteCode() {
  return Math.random().toString(36).slice(2, 8).toUpperCase();
}

export async function POST(req: Request) {
  try {
    const body = await req.json().catch(() => null);
    if (!body) return NextResponse.json({ message: "Geçersiz gövde" }, { status: 400 });

    const type: "team" = "team";
    const role = String(body.role ?? "");
    const consentKVKK = Boolean(body.consentKVKK);

    // Lider (zorunlu)
    const leadName = String(body.name ?? "").trim();
    const leadEmail = String(body.email ?? "").toLowerCase().trim();
    const leadPhone = String(body.phone ?? "").replace(/\s/g, "");
    const leadAge = Number(body.age ?? NaN);
    // Password removed - will be generated by admin approval

    // Team alanları
    const teamName = type === "team" ? String(body.teamName ?? "").trim() : undefined;
    const members: Member[] = Array.isArray(body.members) ? body.members : [];

    // ---- Validasyonlar ----
    const commonOk =
      leadName.length >= 3 &&
      emailRe.test(leadEmail) &&
      phoneRe.test(leadPhone) &&
      Number.isInteger(leadAge) && leadAge >= 14 &&
      ROLES.has(role) &&
      consentKVKK;

    if (!commonOk) {
      return NextResponse.json({ message: "Lider bilgileri/formatı hatalı" }, { status: 400 });
    }

    if (type === "team") {
      if (!teamName) {
        return NextResponse.json({ message: "Takım adı zorunlu" }, { status: 400 });
      }

      // Üye sayısı (lider + diğerleri) en az 2, en fazla 4 (toplam 3-5 kişi)
      const allEmails = new Set<string>([leadEmail]);
      if (!Array.isArray(members) || members.length < MIN_TEAM - 1 || members.length > MAX_TEAM - 1) {
        return NextResponse.json({ message: "Takım en az 3, en fazla 5 kişi olabilir" }, { status: 400 });
      }

      // Her üye doğrulaması
      for (const m of members) {
        const r = String(m?.role ?? "");
        const n = String(m?.name ?? "").trim();
        const e = String(m?.email ?? "").toLowerCase().trim();
        const p = String(m?.phone ?? "").replace(/\s/g, "");
        const a = Number(m?.age ?? NaN);

        const ok =
          n.length >= 3 &&
          emailRe.test(e) &&
          phoneRe.test(p) &&
          Number.isInteger(a) && a >= 18 &&
          ROLES.has(r);

        if (!ok) {
          return NextResponse.json({ message: `Üye bilgisi hatalı: ${n || e || "bilinmiyor"}` }, { status: 400 });
        }
        if (allEmails.has(e)) {
          return NextResponse.json({ message: "Takım içinde aynı e-posta iki kez olamaz" }, { status: 400 });
        }
        allEmails.add(e);
      }

      // Password validation removed - will be generated by admin approval
    } else {
      return NextResponse.json({ message: "Geçersiz başvuru tipi" }, { status: 400 });
    }

    // Ön kontrol: sistemde aynı e-postalar var mı?
    const checkEmails = [leadEmail, ...members.map(m => String(m.email).toLowerCase().trim())];

    const [existingUsers, existingApps] = await Promise.all([
      db.user.findMany({ where: { email: { in: checkEmails } }, select: { email: true } }),
      db.application.findMany({ where: { email: { in: checkEmails } }, select: { email: true } }),
    ]);
    const existingSet = new Set([...existingUsers, ...existingApps].map(x => x.email));
    if (existingSet.size > 0) {
      const clash = checkEmails.find(e => existingSet.has(e));
      return NextResponse.json(
        { message: `Bu e-posta ile kayıt/başvuru zaten var: ${clash}` },
        { status: 409 }
      );
    }

    // ---- Kayıt (transaction) ----
    // Password removed - will be generated by admin approval

    // Sadece Application oluştur - User'lar admin onayından sonra oluşturulacak
    await db.application.create({
      data: {
        name: leadName,
        email: leadEmail,
        role,
        phone: leadPhone,
        age: leadAge,
        consentKVKK,
        type,
        teamName: teamName ?? null,
        status: "pending", // Başlangıçta pending
      },
    });

    // Cookie'ler kaldırıldı - User oluşturulmadığı için cookie'ye gerek yok
    const res = NextResponse.json({ ok: true }, { status: 201 });

    // ---- Davet sistemi kaldırıldı ----
    // Artık sadece admin onayı ile kullanıcılar sisteme girebilir
    // Admin panelinden başvurular onaylandığında otomatik şifre oluşturulur ve mail gönderilir

    return res;
  } catch (e: any) {
    if (e?.code === "P2002" && Array.isArray(e?.meta?.target) && e.meta.target.includes("email")) {
      return NextResponse.json({ message: "Bu e-posta ile kayıt/başvuru zaten var" }, { status: 409 });
    }
    console.error(e);
    return NextResponse.json({ message: "Sunucu hatası" }, { status: 500 });
  }
}
